#!usr/bin/env python3

'''
a module for identifying and counting bigrams and trigrams in word lists

word list should be formatted as in the UCLAPL learning data:

ph o n e t i 
a kh a b a

etc.
'''

from nltk import ngrams
import itertools
import re

def find_segs(featfile):
    '''
    input: Features.txt file (as in UCLAPL)
    output: list of segments
    '''
    segs = []
    with open(featfile, 'r', encoding='utf-8') as f:
        for line in f.readlines()[1:]:
            segs.append(line.split('\t')[0])
    return segs

def build_poss_ngrams(seglist, ngramlength):
    '''
    input: list of segments, numeric lenth of ngrams
    output: a list of every possible ngram in the list
    '''
    ngramlist = [" ".join(ngram) for ngram in list(itertools.product(seglist, repeat=ngramlength))] 
    beginnings = ['<# '+' '.join(ngram) for ngram in list(itertools.product(seglist, repeat=ngramlength-1))]
    endings = [' '.join(ngram)+" #>" for ngram in list(itertools.product(seglist, repeat=ngramlength-1))]
    return ngramlist

def count_ngrams_in_wordlist(word, ngramlist, ngramlength):
    '''
    input: wordlist is a UCLAPL learning data file
            ngramlist is a python list of space-joined ngrams generated by build_poss_ngrams
            ngramlength is numeric
    output: dictionary of ngrams with counts for each
    '''
    ngramdic = {}.fromkeys(ngramlist, 0)
    with open(wordlist, 'r', encoding='utf-8') as f:
        for word in f:
            word = word.strip("\n").split('\t')[0]
            if not word.startswith("<#"):
                word = ("<# " + word + " #>").split(" ")
            ngramlist = [" ".join(ngram) for ngram in ngrams(word, ngramlength)]
            for ngram in ngramlist:
                if ngram in ngramdic:
                    ngramdic[ngram]+=1
                else:
                    ngramdic[ngram]=1
    return ngramdic

def write_ngrams(featfile, wordlist, ngramlength, outfile):
    ngramdic = count_ngrams_in_wordlist(wordlist, build_poss_ngrams(find_segs(featfile), ngramlength), ngramlength)
    with open(outfile, 'w', encoding='utf-8') as f:
        for ngram in sorted(ngramdic, key=ngramdic.__getitem__, reverse=True):
            f.write('%s\t%s\n' % (ngram, ngramdic[ngram]))
    print('Done')


def find_nonloc_trigrams(wordlist, ngramlist, ngramlength=3):
    '''
    includes both local and nonlocal ones
    wordlist is a UCLAPL learning data file
    ngramlist is a python list of space-joined ngrams generated by build_poss_ngrams (all the 3-grams in a seglist)
    output: dictionary of nonlocal ngrams in a word, with  counts
    '''
    ngramdic={}.fromkeys(ngramlist, 0)
    with open(wordlist, 'r', encoding='utf-8') as f:
        for word in f:
            word = word.strip("\n").split('\t')[0]
            if not word.startswith("<#"):
                word = ("<# " + word + " #>").split(" ")
            for s1 in word:
                ind1 = word.index(s1)
                for s2 in word[ind1:]:
                    ind2 = word.index(s2)
                    for s3 in word[ind2:]:
                        ind3 = word.index(s3)
                        if ind1 < ind2 and ind2< ind3:
                            ngram = ' '.join([s1, s2, s3])
                            if not ngram in ngramdic:
                                ngramdic[ngram]=1
                            else:
                                ngramdic[ngram]+=1
    return ngramdic


def write_nonloc_ngrams(featfile, wordlist, outfile):
    ngramlength=3
    ngramdic= find_nonloc_trigrams(wordlist, build_poss_ngrams(find_segs(featfile), ngramlength), ngramlength)
    with open(outfile, 'w', encoding='utf-8') as f:
        for ngram in sorted(ngramdic, key=ngramdic.__getitem__, reverse=True):
            f.write('%s\t%s\n' % (ngram, ngramdic[ngram]))
    print("Done")


def find_nonlocal_seg_trigrams_in_word(word, verbose=False):
    trigs = []
    if len(word)<3:
        return trigs
    else:
        trigs = [' '.join(x) for x in itertools.combinations(word, 3)]
        return trigs



def find_local_seg_trigrams_in_word(word, ngramlength=3):
    return [' '.join(ngram) for ngram in ngrams(word, ngramlength)]


def find_local_nonlocal_trigs_in_wordlist(wordlist, ngramlength=3):
    worddic= {}
    with open(wordlist, 'r', encoding='utf-8') as f:
        for word in f:
            word = ('<# '+ word + ' #>').split(' ')
            worddic[word] = {'local': find_local_seg_trigrams_in_word(word, ngramlength=3),
                            'nonlocal': find_nonlocal_seg_trigrams_in_word(word)}
    return worddic
  

if __name__ == "__main__":
    import sys
    try:
        ngramlength = int(sys.argv[3])
        write_ngrams(sys.argv[1], sys.argv[2], ngramlength, sys.argv[4])
    except IndexError:
        print("Usage: python3 ngram_finder.py fullpathtofeaturesfile fullpathtowordlist ngramlength fullpathtooutfile")
        
    

